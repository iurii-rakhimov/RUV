!!!Дата начала периода01/07/20162015/11/11 01:17:00Ura 2015/11/11 01:17:00 1

Swift1.00 (Элементы Swift)----------12/09/2016 23:06:56Ura 2016/08/21 12:58:45 7
Swift1.01 let  и var //Объявлениеlet  i = 1
var j = 2
j = i + 1
let fFloat: Float = 37.5	// 37.5
let iInt = Int(fFloat)	// 37
27/08/2016 16:32:53Ura 2016/08/27 16:27:48 20
Swift1.02 TypeAlias AudioSample = UInt16var minAS = AudioSample.minAudioSample = UInt16
27/08/2016 16:27:39Ura 2016/08/19 23:02:01 1
Swift1.03 Optionalvar i = "123".toInt()        // 123var i = "12gh3".toInt()        // nillvar a = "123".toInt()       a! // 123var a = "123"
if let d=a.toInt() { a } else { "nothing" }27/08/2016 16:27:32Ura 2016/08/19 23:16:25 3
Swift1.04 Taple - кортежvar http200 = (200,"Ok")http200.0   - 200
http200.1   - Okvar http200 = (code: 200,desc: "Ok")http200.code - 200
http200.desc - Oklet myProgStatus: (Status: Int, Prog: String, Work: Bool) = (200,"ura", true)
print (myProgStatus.Prog)  // "ura"
27/08/2016 16:27:24Ura 2016/08/19 23:04:47 2
Swift1.05 Преобразования типаlet fFloat: Float = 37.5	// 37.5
let iInt = Int(fFloat)	// 37
let myArr = Array("fgh")	// ["f", "g", "h"]
let myString = String (myArr)	// "fgh"
let strOfFloat = "\(fFloat)"	// 37.5
27/08/2016 16:36:25Ura 2016/08/27 16:33:43 21
Swift1.06 Условный операторiflet a = 1
let b = 2
let c = 3

if (a==1 && b==2) || c == 4
{
    print("Yes")
} else {
    print("No")
}
if (a==1 && b==3) || c == 3
{
    print("Yes")
} else {
    print("No")
}

if (a==1 && b==3) || c == 4
{
    print("Yes")
} else {
    print("No")
}27/09/2016 18:16:00Ura 2016/09/27 18:13:01 49
Swift1.07 Переключательswitchvar i=2
switch i
{
case 1: ab="1"
case 2: ab="ok"
default: ab="3"
}
print (ab)
04/09/2016 18:39:22Ura 2016/08/21 20:16:58 8
Swift1.08 Циклfor// циклы вариант 1
// циклы вариант 3
var strNew = ""
for c in str.characters{
    let s:String = String(c)
    strNew = strNew + s
}
strNew
// циклы вариант 4
var arrayName = ["Iurii", "Vladimirovich", "Rakhimov"]
var index=0
for name in arrayName{
    strNew = strNew + " " + name
}
strNew
// циклы вариант 5
var dictName = ["Dan":9, "Delia":16, "Anna":27]
var summaName = 0
for (key, value) in dictName{
    value
    summaName = summaName + value
    strNew = strNew + " " + key
}
summaName
strNew
for i in NumberSeg ..< countRecords29/10/2016 21:26:28Ura 2016/08/19 23:46:38 4
Swift1.09 МножестваSetvar mySet1: Set = ["aa", "bb", "cc"]
var mySet2: Set = ["dd", "aa", "ff"]

var union=mySet1.union(mySet2) // {"cc", "ff", "dd", "aa", "bb"}
var exclusive=mySet1.exclusiveOr(mySet2) // {"ff", "cc", "dd", "bb"}
var subtract=mySet1.subtract(mySet2) //{"bb", "cc"}
mySet1.count // 3
mySet1.insert("hhh") //{"cc", "aa", "bb", "hhh"}
mySet1.remove("aa") //{"cc", "hhh", "bb"}
27/09/2016 18:12:23Ura 2016/08/21 21:55:03 14
Swift1.10 массив Arrayvar mutableArray = ["aa", "bb", "cc"]
print (mutableArray[0])
print (mutableArray[1])
print (mutableArray[2])
// аналог
var emptyArray: [String] = []
emptyArray.append("aa")
print (emptyArray[0])
emptyArray.append("bb")
print (emptyArray[1])
emptyArray.append("cc")
print (emptyArray[2])
var arrayObjcMutable = NSMutableArray(objects: "1", "2", "3")

var arrayMutable = NSMutableArray(object: "1")
arrayMutable.addObject("2")
arrayMutable.addObject("3")
arrayMutable.addObject("4")
arrayMutable.removeObject("2")
27/09/2016 18:12:18Ura 2016/08/21 20:25:50 9
Swift1.11 массив добавлениеapppendvar emptyArray: [String] = []
emptyArray.append("aa")
print (emptyArray[0])
emptyArray.append("bb")
print (emptyArray[1])
emptyArray.append("cc")
print (emptyArray[2])
27/09/2016 18:12:11Ura 2016/08/21 20:43:49 10
Swift1.12 массив удалениеremoveAtIndexmutableArray = ["aa", "bb", "cc"]
mutableArray.removeAtIndex(1)
mutableArray	// ["aa", "cc"]
mutableArray = ["aa", "bb", "cc"]
mutableArray.removeAtIndex(1)
mutableArray.removeLast()
mutableArray.count // 1
mutableArray /// "aa"
27/09/2016 18:12:05Ura 2016/08/21 20:57:40 13
Swift1.13 массив вставкаinsertvar mutableArray = ["aa", "bb", "cc"]
mutableArray.insert("dd", atIndex: 2) // ["aa", "bb", "dd", "cc"]27/09/2016 18:11:58Ura 2016/08/21 20:51:13 12
Swift1.14 массив количество элементовcountmutableArray.count27/09/2016 18:11:51Ura 2016/08/21 20:45:34 11
Swift1.18 СловариDictionaryvar countryDict = ["RUS":"Россия", "BEL":"Белоруссия", "UKR":"Украина"]
var Dict = countryDict["BEL"]
countryDict["RUS"] = "Российская Федерация"
Dict = countryDict["RUS"]
countryDict.updateValue("Russia", forKey: "RUS")
Dict = countryDict["RUS"]
countryDict["TUR"] = "Турция"
countryDict.removeValueForKey("BEL")
countryDict
var dict: Dictionary<String, String> = ["собака":"гав", "кошка":"мяу", "утка":"кря"]
var old = dict["собака"]
dict["собака"] = "гав-гав"
var new = dict["собака"]
dict

//var dictOBJC = NSDictionary[1,2,3,4]
var dictOBJC = NSDictionary(objects: [1,2,3,4], forKeys: ["4","3","2","1"])
var dictOBJC_M = NSMutableDictionary(objects: [1,2,3,4], forKeys: ["4","3","2","1"])
dictOBJC_M.setObject("6", forKey: "4")
12/10/2016 11:03:30Ura 2016/08/22 00:32:47 15
Swift1.19 Структурыstructstruct Point {
    var x: Int
    var y: Int
    func printPoint() -> String{
        return "x = \(x); y = \(y)"
    }
    mutating func resetPoint(){
        x = 0
        y = 0
    }
    init(){
        x = 0
        y = 0
    }
    init(x: Int, y: Int){
        self.x = x
        self.y = y
    }
}
var p = Point()
var point = Point(x: 10, y: 12)
var point1 = point

point.printPoint()

point.resetPoint()
point.printPoint()

point.x
point.y

p.x
p.y
12/10/2016 11:03:22Ura 2016/09/05 11:30:15 35
Swift2.00 (Строковые методы)----------

12/09/2016 23:07:14Ura 2016/08/27 16:17:37 19
Swift2.01 count (Length)Число символов в строке var myStr = "hhh,  jjjj,  kkkk"
myStr.characters.count		// 17
func LengthString(myString: String) -> Int
{
    return myString.characters.count
}
29/09/2016 18:12:06Ura 2016/08/27 16:43:04 24
Swift2.02 substringПодстрока в строкеfunc SubstrString(strIn: String, indexStart: Int, indexEnd: Int) -> String
{
    if ( indexStart < 0 )
    {
        return("")
    }
    if ( indexEnd < 0 )
    {
        return("")
    }
    if ( indexStart > indexEnd )
    {
        return("")
    }
    let startIndex = strIn.index(strIn.startIndex, offsetBy: indexStart)
    let endIndex = strIn.index(strIn.startIndex, offsetBy: indexEnd)
    let strOut = strIn[startIndex...endIndex]
    
    return strOut
}
let str = "My String"
let strNew=SubstrString(strIn: str,indexStart: 4,indexEnd: 6) // "tri"28/10/2016 17:17:16Ura 2016/08/27 16:41:15 23
Swift2.03 spliceвставить строку в строкуне работает в 3 свифт
12/10/2016 10:56:54Ura 2016/08/29 08:45:41 34
Swift2.07 capitalizedStringПервый символ изменим на заглавныйvar s="привет"
var strCap = s.capitalizedString	// "Привет"
27/08/2016 16:47:22Ura 2016/08/27 16:36:57 22
Swift2.08 uppercased()Верхний и нижий регистрvar str = "abc"
let strUppercase = ab.uppercased() //ABC12/10/2016 17:34:21Ura 2016/08/20 00:05:03 6
Swift2.09 hasPrefix hasSuffixПроверить начало и конец строкиvar ab = "ab"
ab=ab+"c"
ab.hasPrefix("a") // true
ab.hasPrefix("A") // false
ab.hasSuffix("bc") // true27/08/2016 17:03:25Ura 2016/08/19 23:54:16 5
Swift2.10 containsStringпроверить содержит строка строкуvar str = "Hello, playground"
str.containsString("play")	//true
str.containsString("fuck")	//false

05/09/2016 17:01:25Ura 2016/09/05 16:56:11 39
Swift2.11 stringByReplacingOccurrencesOfStringзамнить при наличии строка строкуstr = "Hello fuck, playground"
str.stringByReplacingOccurrencesOfString("fuck", withString: "!")	//"Hello !, playground"

str = "Hello Funk, playground"
str.stringByReplacingOccurrencesOfString("fuck", withString: "!")	// "Hello Funk, playground"


05/09/2016 17:08:10Ura 2016/09/05 17:01:32 40
Swift3.00 (Функции)----------

12/09/2016 23:07:24Ura 2016/08/27 17:06:38 27
Swift3.01 ОбъявлениеИспользованиеfunc strName( name : String ) -> String
{
    return("My " + name)
}
var str00 = strName("alex")

27/08/2016 17:39:42Ura 2016/08/27 17:10:12 28
Swift3.02 возвратнескольких параметровfunc strFIO( name : String ) -> (Name:String, Famaly:String)
{
    return("Rakhimov ", name)
}
strFIO("alex")
let myFIO: (Famaly: String, Name: String) = strFIO("alex")
print (myFIO.Famaly)	// "alex"
print (myFIO.Name)	// "Rakhimov "

27/08/2016 17:37:04Ura 2016/08/27 17:12:41 29
Swift3.03 входпеременное количество параметровfunc average(nubers:Double...) -> Double
{
    var total:Double = 0
    
    for nuber in nubers
    {
        total += nuber
    }
    return total / Double(nubers.count)
}

average( 2, 3 )		// 2.5
average( 2, 3, 4 )	// 3
func concat(strInput:String...) -> String
{
    var strConcat = ""
    for strElement in strInput
    {
        strConcat = strConcat + strElement
    }
    return strConcat
}
concat("Yurii ", "Rakhimov")		// "Yurii Rakhimov"
concat("Yurii ", "Vladimirovich ", "Rakhimov")	// "Yurii Vladimirovich Rakhimov"
27/08/2016 17:38:09Ura 2016/08/27 17:15:30 30
Swift3.03 параметрыфункции не изменяютсяfunc funcParamConst(Famaly:String, Name:String) -> String
{
    var strConcat = Famaly + Name
    return strConcat
}
funcParamConst("Rakhimov ", "Yurii")	// "Rakhimov Yurii"

27/08/2016 17:36:15Ura 2016/08/27 17:24:26 31
Swift3.04 параметрыфункции изменяются внутриfunc funcParamVar(var Famaly:String, var Name:String) -> String
{
    Name = "Aleks"
    var strConcat = Famaly + Name
    return strConcat
}
funcParamVar("Rakhimov ", "Yurii")	// "Rakhimov Aleks"

27/08/2016 17:35:22Ura 2016/08/27 17:29:02 32
Swift3.05 параметрыфункции изменяются внутри и внеfunc funcParamInOut(inout Fio1:String, inout Fio2:String) -> String
{
    var strConcat = Fio1
    Fio1 = Fio2
    Fio2 = strConcat
    strConcat = Fio1 + " " + Fio2
    return strConcat
}
var Fio1:String = "Rakhimov"
var Fio2:String = "Yurii"
funcParamInOut(&Fio1, &Fio2)	// "Yurii Rakhimov"
Fio1		// "Yurii"
Fio2		// "Rakhimov"

27/08/2016 17:35:35Ura 2016/08/27 17:31:24 33
Swift4.01 Классclassclass Human{
    var name: String?
    var age: Int
    func sayHello(friendName: String) -> String{
        return "Hello, \(friendName)"
    }
    init(){
        age = 1
    }
    init(age: Int){
        self.age = age
    }
    init(name: String){
        self.age = 1
        self.name = name
    }
    init(name: String, age: Int){
        self.age = age
        self.name = name
    }
}
var h1 = Human(name: "Oleg", age: 31)
var h2 = h1
h1.sayHello("Aleksandr")
h2.name
h1.name = "Pavel"
h2.name
// наследуемые классы class Girl: Human{
    var hairColor: UIColor
    override func sayHello(friendName: String) -> String {
        if let name = name {
            return "Hi, \(friendName). My name is \(name)"
        }
        return "Hi, \(friendName)"
    }
    override init() {
        hairColor = UIColor.whiteColor()
        super.init()
    }
    init(hc: UIColor) {
        hairColor = hc
        super.init(name: "Anna")
    }
}
var girl = Girl(hc: UIColor.darkGrayColor())
girl.name = "Olga"
girl.sayHello("Petr")
girl.name = nil
girl.sayHello("Petr")
12/10/2016 10:59:53Ura 2016/09/05 14:36:41 36
Swift4.02 классы вычисляемые свойстваclass get set// вычисляемые свойства
class Workout{
    var exercises: [String: Int]
    var countRepetitions: Int {
        get{
            var countReps = 0
            for ( _, value) in exercises // or ( key, value) in exercises
            {
                countReps = countReps + value
            }
            return countReps
        }
        set(newValue){
            var newExercises:[String: Int] = Dictionary()
            for (key,_) in exercises{
                newExercises.updateValue(newValue/exercises.count, forKey: key)
            }
            exercises = newExercises
        }
    }
    init(exercises: Dictionary<String, Int>){
        self.exercises = exercises
    }
}

var w = Workout(exercises: ["Приседания": 20, "Жим": 10, "Пресс": 10])
w.countRepetitions
w.countRepetitions = 120 // "Жим": 40, "Приседания": 40, "Пресс": 40
w.exercises

12/10/2016 11:00:05Ura 2016/09/05 16:20:23 37
Swift4.03 классы наблюдатели свойствclass willSet didSetclass Workout{
    var exercises: [String: Int]
    var workoutName: String = "My workout"{
        // наблюдатели свойств
        willSet{
            print("Current workout name = \(workoutName)")
            print(newValue)
        }
        didSet(value){
            if workoutName.containsString("fuck"){
                workoutName.stringByReplacingOccurrencesOfString("fuck", withString: "***")
            }
            print("Current workout name = \(workoutName)")
            print(value)
        }
        
    }
    var countRepetitions: Int {
        get{
            var countReps = 0
            for ( _, value) in exercises // or ( key, value) in exercises
            {
                countReps = countReps + value
            }
            return countReps
        }
        set(newValue){
            var newExercises:[String: Int] = Dictionary()
            for (key,_) in exercises{
                newExercises.updateValue(newValue/exercises.count, forKey: key)
            }
            exercises = newExercises
        }
    }
    init(exercises: Dictionary<String, Int>){
        self.exercises = exercises
    }
}

var w = Workout(exercises: ["Приседания": 20, "Жим": 10, "Пресс": 10])
w.countRepetitions
w.countRepetitions = 120
w.exercises
w.workoutName = "My new fucking workout"
w.workoutName

12/10/2016 11:00:17Ura 2016/09/05 16:52:39 38
Swift4.04 классы Протоколыclass protocolvar str = "Hello, playground"
protocol GirlProtocol{
    var name: String{set get}
    var age: Int{set get}
    func sayHelloToBoy(boyName: String) -> String
    func sendSms(phoneNumber: String, text: String) -> Bool
    init(name:String, age: Int)
}
class Girl: GirlProtocol{
    var name: String
    var age: Int
    func sayHelloToBoy(boyName: String) -> String{
        return "Hi, \(boyName)"
    }
    func sendSms(phoneNumber: String, text: String) -> Bool{
        return true
    }
    required init(name:String, age: Int){
        self.name = name
        self.age = age
    }
}
let girl = Girl(name: "Hanna", age: 18)
girl.name + " say " + girl.sayHelloToBoy("Oleg")	//"Hanna say Hi, Oleg"

12/10/2016 11:01:15Ura 2016/09/05 17:32:23 41
Swift4.05 классы Делегированиеclass delegateprotocol GirlProtocol{
    var name: String{set get}
    var age: Int{set get}
    var delegate: GirlFatherProtocol? {get set}
    func sayHelloToBoy(boyName: String) -> String
    func sendSms(phoneNumber: String, text: String) -> Bool
    init(name:String, age: Int)
    init(name:String, age: Int, delegate: GirlFatherProtocol?)
}
protocol GirlFatherProtocol{
    var phones: [String] {get set}
    func savePhone(pphoneNumber: String)
}
class GirlFather: GirlFatherProtocol{
    var phones: [String] = []
    func savePhone(phoneNumber: String)
    {
        phones.append(phoneNumber)
    }
}

class Girl: GirlProtocol{
    var name: String
    var age: Int
    var delegate: GirlFatherProtocol?
    func sayHelloToBoy(boyName: String) -> String{
        return "Hi, \(boyName)"
    }
    func sendSms(phoneNumber: String, text: String) -> Bool{
//        delegate?.phones
        delegate?.savePhone(phoneNumber)
        return true
    }
    required init(name:String, age: Int){
        self.name = name
        self.age = age
    }
    required init(name:String, age: Int, delegate: GirlFatherProtocol?){
        self.name = name
        self.age = age
        self.delegate = delegate
    }
}
let girlDelegate = GirlFather()

let girl = Girl(name: "Masha", age: 21, delegate: girlDelegate)
girl.sendSms("495-8902345", text: "Privet")
girl.sendSms("495-2345678", text: "MyPrivet")

girlDelegate.phones	//["495-8902345", "495-2345678"]

12/10/2016 11:01:27Ura 2016/09/05 19:15:42 42
Swift4.06 обработка ошибокErrorTypeenum divError: ErrorType{
    case DivByZero
    case DivByMinus
}
func divide(param1: Int, param2: Int) throws ->Int{
    if param2 == 0 {
        throw divError.DivByZero
    }
    if param2 < 0 {
        throw divError.DivByMinus
    }
    return param1/param2
}
try? divide(10, param2: 0)
let i: Int? = try? divide(10, param2: 2)
do {
    try divide(10, param2: -2)
} catch divError.DivByZero {
    print("Делим на ноль")
} catch divError.DivByMinus {
    print("Делим на отрицательное число")
}

12/10/2016 11:01:39Ura 2016/09/05 19:15:54 43
Swift4.07 приведение типов(i as! String) (i as! Int)var str : String?
var array: [AnyObject?] = ["Hello", "Hi", "ABC", 1, 2, 89, nil, str]
var returnString: String = ""
var returnInt: Int = 0
var countObject: Int = 0
for i in array{
    if i is String {
        returnString = returnString + (i as! String)
    }
    if i is Int {
        returnInt = returnInt + (i as! Int)
    }
    if i == nil {
        countObject += 1
    }
}
returnString	// "HelloHiABC"
returnInt	// 92
countObject	// 2

12/10/2016 11:01:54Ura 2016/09/05 20:13:54 44
Swift4.08 статические переменные и статические методы классаstaticclass MyClass {
    static let singleton = MyClass()
    static var s = "Static string"
    class func staticZen() -> String {
        return "STATIC ZEN"
    }
    var v: String = "My String"
    func zen() -> String{
        return "ZEN"
    }
}
MyClass.singleton	// MyClass
MyClass.s		// "Static string"
MyClass.s = "1"
MyClass.s		// "1"
MyClass.staticZen()	// "STATIC ZEN"

12/10/2016 11:02:04Ura 2016/09/05 20:35:37 45
Swift4.09 Наследование классовclass xxx: yyyObjectstruct Position {
    var latitude: Float
    var lontitude: Float
}
class GeoObject {
    var position: Position
    var name: String
    
    class func descriptionClass() -> String {
        return "Это класс любого гео объекта"
    }
    init(name: String, position: Position){
        self.name = name
        self.position = position
    }
}
class City: GeoObject{
    var countPeoples: Int
    override class func descriptionClass() -> String {
        return "Это класс города"
    }

    init(name: String, position: Position, countPeoples: Int){
        self.countPeoples = countPeoples
        super.init(name: name, position: position)
    }
}
class Monument: GeoObject {
    var dateCreate: NSDate
    var description: String?
    override class func descriptionClass() -> String {
        return "Это описание памятника"
    }
    
    init(name: String, position: Position, dateCreate: NSDate){
        self.dateCreate = dateCreate
        super.init(name: name, position: position)
    }
    
    init(name: String, position: Position, dateCreate: NSDate, description: String){
        self.dateCreate = dateCreate
        self.description = description
        super.init(name: name, position: position)
    }
}
GeoObject.descriptionClass()

var pos = Position(latitude: 10, lontitude: 15)
pos.latitude
pos.lontitude
let geo = GeoObject(name: "Paris", position: pos)
let paris = City(name: "Paris", position: pos, countPeoples: 3000000)
let monument = Monument(name: "Francick", position: pos, dateCreate: NSDate())
City.descriptionClass()
paris.name
Monument.descriptionClass()
var geoArray: [GeoObject] = [geo, paris, monument]
if geoArray[1] is City {
    (geoArray[1] as! City).countPeoples
}
if geoArray[2] is City {
    (geoArray[2] as! City).countPeoples
}
else{
    print("в объекте нет населения")
}
12/10/2016 11:02:14Ura 2016/09/05 21:41:34 46
Swift4.15 componentsSeparatedByStringиз строки в массивvar myStr1 = "hhh,  jjjj,  kkkk"
let arrayElement = strUppercasePoisk.components(separatedBy: ",")
var myElementArray = arrayElement[1]		// "jjjj"
12/10/2016 11:08:29Ura 2016/08/27 16:48:04 25
Swift4.16 joinиз массива в строкуvar myArray = ["hhh", "jjjj", "kkkk"]
let stringForSave = myArray.joined(separator: " ") // "hhh jjjj kkkk"
12/10/2016 11:11:15Ura 2016/08/27 16:49:41 26
Swift5.00 ----------

12/10/2016 10:58:39Ura 2016/08/23 21:28:48 16
Swift5.01 UILabel@IBOutlet weak var lStart: UILabel!        lStart.text = "Ввод пароля и логина"
        lStart.backgroundColor = UIColor.redColor()
        lStart.textColor = UIColor.yellowColor()

12/10/2016 10:58:46Ura 2016/08/23 21:29:36 17
Swift5.01 UITextField Спрятать клавиатуру после окончания редактирования UITextField.    @IBOutlet weak var tfLogin: UITextField! var Login = tfLogin.text
tfLogin.resignFirstResponder()
12/10/2016 10:58:55Ura 2016/08/23 21:32:58 18
Swift9.00 ----------

12/09/2016 14:07:22Ura 2016/09/12 14:07:02 47
Swift9.01 Проект-Сенина Todo1.Создаем новую задачу
2.Удаляем View Controler
3.Добавим Navigation Controler и делаем главным галочку на ( Is Instal View Controler )
4.(Size) Размер делаем 4.7 и IPhone 5s
5. Ставим на AppDelegate.swift и правой кнопкой создадим класс : добавим файл New File -> Cocoa Touch Class -> (Subclass of:) UITableViewController
6.Bar Button Item перетушим в Root View Controller, Item переносим под кнопку < и далее из Left Bar Button Items под Right Bar Button Item
6.1 Нажмем на Item, перейдем в (Show the Attributes Inspector), далее System Item ставим Add и получим + на кнопке
7.Root View Controller присвоим класс (Show the Identity Inspector) в Class на TableViewController
8.Открываем (Show the Assistant Editor) Ставим на Add и зажимая Ctrl перетягиваем в TableViewController -> создаем @IBAction func pushAddAction(sender: AnyObject) {}
9.Помещаем в TableViewController var toDoItemCurrent: ToDoItem? и в     override func viewDidLoad() {
        super.viewDidLoad()
// добавим
        if toDoItemCurrent == nil {
            toDoItemCurrent = rootItem
        }
10.    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {
        return 1 // возврат 1

    }
11.	   override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // возвращаем количество элементов
        return toDoItemCurrent!.subItems.count
    }
12. Ячейка нажимаем на (Table View Cell) , перейдем в (Show the Attributes Inspector), далее Style ставим Basic, далее Identifier пишем Cell или idCell
13.  Связываем override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCellWithIdentifier("Cell", forIndexPath: indexPath)
        let itemForCell = toDoItemCurrent?.subItems[indexPath.row]
        cell.textLabel?.text = itemForCell?.name
        return cell
    }
14. При нажатии + добавляется новый элемент
   @IBAction func pushAddAction(sender: AnyObject) {
        let newItem = ToDoItem(name: "NewItem" + String(toDoItemCurrent!.subItems.count))
        
        toDoItemCurrent?.addSubItem(newItem)
        
        tableView.reloadData()
    }

16.Добавим файл Model.swift
var rootItem: ToDoItem {
    return ToDoItem.init(name: "Root")
}

class Model
{
    func saveData()
    {
        
    }
    func loadData()
    {
        
    }
        
}
17.Добавим файл ToDoItem.swift
class ToDoItem
{
    
    var name: String
    var isComplate: Bool
    
    var subItems:[ToDoItem]
    
    init (name: String ) {
        self.name = name
        self.isComplate = false
        self.subItems = []
    }
    
    func addSubItem(subItem: ToDoItem)
    {
        subItems.append(subItem)
        
    }

}

12/09/2016 14:08:09Ura 2016/09/12 14:07:23 48

